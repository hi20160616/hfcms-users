// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsergroupsServiceClient is the client API for UsergroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsergroupsServiceClient interface {
	ListUsergroups(ctx context.Context, in *ListUsergroupsRequest, opts ...grpc.CallOption) (*ListUsergroupsResponse, error)
	GetUsergroup(ctx context.Context, in *GetUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error)
	CreateUsergroup(ctx context.Context, in *CreateUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error)
	UpdateUsergroup(ctx context.Context, in *UpdateUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error)
	DeleteUsergroup(ctx context.Context, in *DeleteUsergroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type usergroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsergroupsServiceClient(cc grpc.ClientConnInterface) UsergroupsServiceClient {
	return &usergroupsServiceClient{cc}
}

func (c *usergroupsServiceClient) ListUsergroups(ctx context.Context, in *ListUsergroupsRequest, opts ...grpc.CallOption) (*ListUsergroupsResponse, error) {
	out := new(ListUsergroupsResponse)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.UsergroupsService/ListUsergroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usergroupsServiceClient) GetUsergroup(ctx context.Context, in *GetUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error) {
	out := new(Usergroup)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.UsergroupsService/GetUsergroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usergroupsServiceClient) CreateUsergroup(ctx context.Context, in *CreateUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error) {
	out := new(Usergroup)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.UsergroupsService/CreateUsergroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usergroupsServiceClient) UpdateUsergroup(ctx context.Context, in *UpdateUsergroupRequest, opts ...grpc.CallOption) (*Usergroup, error) {
	out := new(Usergroup)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.UsergroupsService/UpdateUsergroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usergroupsServiceClient) DeleteUsergroup(ctx context.Context, in *DeleteUsergroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.UsergroupsService/DeleteUsergroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsergroupsServiceServer is the server API for UsergroupsService service.
// All implementations must embed UnimplementedUsergroupsServiceServer
// for forward compatibility
type UsergroupsServiceServer interface {
	ListUsergroups(context.Context, *ListUsergroupsRequest) (*ListUsergroupsResponse, error)
	GetUsergroup(context.Context, *GetUsergroupRequest) (*Usergroup, error)
	CreateUsergroup(context.Context, *CreateUsergroupRequest) (*Usergroup, error)
	UpdateUsergroup(context.Context, *UpdateUsergroupRequest) (*Usergroup, error)
	DeleteUsergroup(context.Context, *DeleteUsergroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUsergroupsServiceServer()
}

// UnimplementedUsergroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsergroupsServiceServer struct {
}

func (UnimplementedUsergroupsServiceServer) ListUsergroups(context.Context, *ListUsergroupsRequest) (*ListUsergroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsergroups not implemented")
}
func (UnimplementedUsergroupsServiceServer) GetUsergroup(context.Context, *GetUsergroupRequest) (*Usergroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsergroup not implemented")
}
func (UnimplementedUsergroupsServiceServer) CreateUsergroup(context.Context, *CreateUsergroupRequest) (*Usergroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsergroup not implemented")
}
func (UnimplementedUsergroupsServiceServer) UpdateUsergroup(context.Context, *UpdateUsergroupRequest) (*Usergroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsergroup not implemented")
}
func (UnimplementedUsergroupsServiceServer) DeleteUsergroup(context.Context, *DeleteUsergroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsergroup not implemented")
}
func (UnimplementedUsergroupsServiceServer) mustEmbedUnimplementedUsergroupsServiceServer() {}

// UnsafeUsergroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsergroupsServiceServer will
// result in compilation errors.
type UnsafeUsergroupsServiceServer interface {
	mustEmbedUnimplementedUsergroupsServiceServer()
}

func RegisterUsergroupsServiceServer(s grpc.ServiceRegistrar, srv UsergroupsServiceServer) {
	s.RegisterService(&UsergroupsService_ServiceDesc, srv)
}

func _UsergroupsService_ListUsergroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsergroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsergroupsServiceServer).ListUsergroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.UsergroupsService/ListUsergroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsergroupsServiceServer).ListUsergroups(ctx, req.(*ListUsergroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsergroupsService_GetUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsergroupsServiceServer).GetUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.UsergroupsService/GetUsergroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsergroupsServiceServer).GetUsergroup(ctx, req.(*GetUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsergroupsService_CreateUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsergroupsServiceServer).CreateUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.UsergroupsService/CreateUsergroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsergroupsServiceServer).CreateUsergroup(ctx, req.(*CreateUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsergroupsService_UpdateUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsergroupsServiceServer).UpdateUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.UsergroupsService/UpdateUsergroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsergroupsServiceServer).UpdateUsergroup(ctx, req.(*UpdateUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsergroupsService_DeleteUsergroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsergroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsergroupsServiceServer).DeleteUsergroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.UsergroupsService/DeleteUsergroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsergroupsServiceServer).DeleteUsergroup(ctx, req.(*DeleteUsergroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsergroupsService_ServiceDesc is the grpc.ServiceDesc for UsergroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsergroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hfcms.users.v1.UsergroupsService",
	HandlerType: (*UsergroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsergroups",
			Handler:    _UsergroupsService_ListUsergroups_Handler,
		},
		{
			MethodName: "GetUsergroup",
			Handler:    _UsergroupsService_GetUsergroup_Handler,
		},
		{
			MethodName: "CreateUsergroup",
			Handler:    _UsergroupsService_CreateUsergroup_Handler,
		},
		{
			MethodName: "UpdateUsergroup",
			Handler:    _UsergroupsService_UpdateUsergroup_Handler,
		},
		{
			MethodName: "DeleteUsergroup",
			Handler:    _UsergroupsService_DeleteUsergroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/v1/hfcms-usergroups.proto",
}
