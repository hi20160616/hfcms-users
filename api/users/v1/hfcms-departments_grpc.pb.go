// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentsAPIClient is the client API for DepartmentsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentsAPIClient interface {
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type departmentsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentsAPIClient(cc grpc.ClientConnInterface) DepartmentsAPIClient {
	return &departmentsAPIClient{cc}
}

func (c *departmentsAPIClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.DepartmentsAPI/ListDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsAPIClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.DepartmentsAPI/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsAPIClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.DepartmentsAPI/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsAPIClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.DepartmentsAPI/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsAPIClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hfcms.users.v1.DepartmentsAPI/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentsAPIServer is the server API for DepartmentsAPI service.
// All implementations must embed UnimplementedDepartmentsAPIServer
// for forward compatibility
type DepartmentsAPIServer interface {
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*Department, error)
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDepartmentsAPIServer()
}

// UnimplementedDepartmentsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentsAPIServer struct {
}

func (UnimplementedDepartmentsAPIServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedDepartmentsAPIServer) GetDepartment(context.Context, *GetDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedDepartmentsAPIServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentsAPIServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedDepartmentsAPIServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedDepartmentsAPIServer) mustEmbedUnimplementedDepartmentsAPIServer() {}

// UnsafeDepartmentsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentsAPIServer will
// result in compilation errors.
type UnsafeDepartmentsAPIServer interface {
	mustEmbedUnimplementedDepartmentsAPIServer()
}

func RegisterDepartmentsAPIServer(s grpc.ServiceRegistrar, srv DepartmentsAPIServer) {
	s.RegisterService(&DepartmentsAPI_ServiceDesc, srv)
}

func _DepartmentsAPI_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsAPIServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.DepartmentsAPI/ListDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsAPIServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentsAPI_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsAPIServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.DepartmentsAPI/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsAPIServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentsAPI_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsAPIServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.DepartmentsAPI/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsAPIServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentsAPI_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsAPIServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.DepartmentsAPI/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsAPIServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentsAPI_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsAPIServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hfcms.users.v1.DepartmentsAPI/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsAPIServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentsAPI_ServiceDesc is the grpc.ServiceDesc for DepartmentsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hfcms.users.v1.DepartmentsAPI",
	HandlerType: (*DepartmentsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDepartments",
			Handler:    _DepartmentsAPI_ListDepartments_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _DepartmentsAPI_GetDepartment_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _DepartmentsAPI_CreateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _DepartmentsAPI_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _DepartmentsAPI_DeleteDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/v1/hfcms-departments.proto",
}
